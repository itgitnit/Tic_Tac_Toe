{"version":3,"sources":["components/Icon.js","App.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setwinMessage","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAYeA,EAVF,SAAC,GACV,OADuB,EAAXC,MAER,IAAK,SACD,OAAO,cAAC,IAAD,CAAaC,UAAU,UAClC,IAAK,QACD,OAAO,cAAC,IAAD,CAASA,UAAU,UAC9B,QACI,OAAO,cAAC,IAAD,CAAOA,UAAU,Y,+DCD9BC,G,YAAY,IAAIC,MAAM,GAAGC,KAAK,UAmHrBC,EAhHH,WAAO,IAAD,EAEcC,oBAAS,GAFvB,mBAETC,EAFS,KAEAC,EAFA,OAGoBF,mBAAS,eAH7B,mBAGTG,EAHS,KAGGC,EAHH,KAoEVC,EAAa,SAAAC,GACjB,OAAIH,EACKI,YAAMJ,EAAY,CAAEK,KAAM,YAEN,SAAzBZ,EAAUU,GAKLC,YAAM,iBAAkB,CAAEC,KAAM,WAJvCZ,EAAUU,GAAcL,EAAU,QAAU,SAC5CC,GAAYD,QA9DVL,EAAU,KAAOA,EAAU,IAC7BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAGI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAGI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAGI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAGI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAGI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAGI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAGI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,YAiBjB,OACE,eAACa,EAAA,EAAD,CAAWd,UAAU,MAArB,UACE,cAAC,IAAD,CAAgBe,SAAS,kBACzB,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAKC,GAAI,EAAGlB,UAAU,cAAtB,UACGQ,EACC,sBAAKR,UAAU,YAAf,UACE,oBAAIA,UAAU,0CAAd,SACGQ,IAEH,cAACW,EAAA,EAAD,CAAQC,MAAM,UAAUC,OAAK,EAACC,QAvFvB,WACjBf,GAAW,GACXE,EAAc,IACdR,EAAUE,KAAK,QAAS,EAAG,IAoFjB,2DAGF,qBAAIH,UAAU,2BAAd,UAA0CM,EAAU,QAAU,SAA9D,YAEF,qBAAKN,UAAU,OAAf,SACGC,EAAUsB,KAAI,SAACC,EAAMC,GAAP,OACb,eAACC,EAAA,EAAD,CAAMN,MAAM,YAAYE,QAAS,kBAAMZ,EAAWe,IAAlD,cACE,cAACE,EAAA,EAAD,CAAU3B,UAAU,MAApB,SACE,cAAC,EAAD,CAAMD,KAAMyB,uBC5G9BI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c15286d8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FaTimes, FaPen, FaRegCircle } from \"react-icons/fa\";\r\nconst Icon = ({ name }) => { //name is props\r\n    switch (name) {\r\n        case \"circle\":\r\n            return <FaRegCircle className=\"icons\" />;\r\n        case 'cross':\r\n            return <FaTimes className=\"icons\" />;\r\n        default:\r\n            return <FaPen className=\"icons\" />;\r\n    }\r\n};\r\nexport default Icon;","import React, { useState } from 'react';\nimport Icon from \"./components/Icon\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Card, CardBody, Container, Button, Col, Row } from \"reactstrap\"\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nconst itemArray = new Array(9).fill(\"empty\")//start krne se pehele array bnaaa rhe 3X3 kaa.\n\n\nconst App = () => {\n\n  const [isCross, setIsCross] = useState(false); //here we check is this set cross or is this set circle.\n  const [winMessage, setwinMessage] = useState(\"Tic-Tac-Toe\");\n\n  const reloadGame = () => {\n    setIsCross(false)\n    setwinMessage(\"\")\n    itemArray.fill(\"empty\", 0, 9);\n  };\n\n  const checkIsWinner = () => {\n    if (itemArray[0] === itemArray[1] &&\n      itemArray[0] === itemArray[2] &&\n      itemArray[0] !== \"empty\"\n    ) {\n      setwinMessage(`${itemArray[0]} won`);\n    }\n    else if (\n      itemArray[3] !== \"empty\" &&\n      itemArray[3] === itemArray[4] &&\n      itemArray[4] === itemArray[5]\n    ) {\n      setwinMessage(`${itemArray[3]} won`);\n    }\n    else if (\n      itemArray[6] !== \"empty\" &&\n      itemArray[6] === itemArray[7] &&\n      itemArray[7] === itemArray[8]\n    ) {\n      setwinMessage(`${itemArray[6]} won`);\n    }\n    else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[3] &&\n      itemArray[3] === itemArray[6]\n    ) {\n      setwinMessage(`${itemArray[0]} won`);\n    }\n    else if (\n      itemArray[1] !== \"empty\" &&\n      itemArray[1] === itemArray[4] &&\n      itemArray[4] === itemArray[7]\n    ) {\n      setwinMessage(`${itemArray[1]} won`);\n    }\n    else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[5] &&\n      itemArray[5] === itemArray[8]\n    ) {\n      setwinMessage(`${itemArray[2]} won`);\n    }\n    else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[4] &&\n      itemArray[4] === itemArray[8]\n    ) {\n      setwinMessage(`${itemArray[0]} won`);\n    }\n    else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[4] &&\n      itemArray[4] === itemArray[6]\n    ) {\n      setwinMessage(`${itemArray[2]} won`);\n    }\n  };\n  const changeItem = itemNumber => {\n    if (winMessage) {\n      return toast(winMessage, { type: \"success\" });\n    }\n    if (itemArray[itemNumber] == \"empty\") {\n      itemArray[itemNumber] = isCross ? \"cross\" : \"circle\"\n      setIsCross(!isCross)\n    }\n    else {\n      return toast(\"Already_Filled\", { type: \"error\" })\n    }\n    checkIsWinner();\n  };\n\n  return (\n    <Container className=\"p-5\">\n      <ToastContainer position=\"bottom-center\" />\n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n          {winMessage ? (\n            <div className=\"mb-2 mt-2\">\n              <h1 className=\"text-warning text-uppercase text-center\">\n                {winMessage}\n              </h1>\n              <Button color=\"primary\" block onClick={reloadGame}>Click To Start The Game / Reload The Game </Button>\n            </div>\n          ) : (\n            <h1 className=\"text-center text-warning\">{isCross ? \"Cross\" : \"Circle\"} turns</h1>\n          )}\n          <div className=\"grid\">\n            {itemArray.map((item, index) => (\n              <Card color=\"secondary\" onClick={() => changeItem(index)}> {/* Here we use callBack kyuki agr hum seedhe changeItem() use kr lete toh, game khud hi reload ho jata. */}\n                <CardBody className=\"box\">\n                  <Icon name={item} />\n                </CardBody>\n              </Card>\n            ))}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}